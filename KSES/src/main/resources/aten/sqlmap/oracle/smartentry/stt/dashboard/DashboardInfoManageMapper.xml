<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kses.backoffice.stt.dashboard.mapper.DashboardInfoManageMapper">

    <select id="selectEntryMaximumNumber" resultType="int">
        SELECT
            SUM(CLASS_CNT) +
            SUM(CASE WHEN CENTER_STAND_MAX IS NULL THEN 0 ELSE CENTER_STAND_MAX END)
        FROM (
             SELECT
                 (   SELECT COUNT(*)
                     FROM TSEB_PART_INFO_D P
                          INNER JOIN TSEB_SEAT_INFO_D S ON S.CENTER_CD = P.CENTER_CD AND S.PART_CD = P.PART_CD
                     WHERE P.CENTER_CD = M.CENTER_CD
                       AND P.USE_YN = 'Y'
                       AND P.PART_CLASS IS NOT NULL
                       AND S.USE_YN = 'Y'
                 ) AS CLASS_CNT,
                 (   SELECT CENTER_STAND_MAX
                     FROM TSEB_CENTER_INFO_M
                     WHERE CENTER_CD = M.CENTER_CD
                       AND CENTER_STAND_YN = 'Y'
                 ) AS CENTER_STAND_MAX
             FROM TSEB_CENTER_INFO_M M
             WHERE M.USE_YN = 'Y'
         ) TB
    </select>

    <select id="selectTodayResvNumber" resultType="int">
        SELECT COUNT(*)
        FROM TSER_RESV_INFO_I
        WHERE RESV_END_DT = TO_CHAR(SYSDATE,'YYYYMMDD')
            AND RESV_STATE IN
        <foreach collection="resvStates" item="item" separator="," open="(" close=")">
            #{item}
        </foreach>
    </select>

    <select id="selectDashboardList" resultType="lmap">
        WITH CTE_CENTER AS (
            SELECT CENTER_CD, CENTER_NM, CENTER_ORDER FROM TSEB_CENTER_INFO_M WHERE USE_YN = 'Y'
        )
        SELECT
            CENTER_CD, CENTER_NM, CLASS_4, CLASS_3, CLASS_2, CLASS_1, STAND,
            (CLASS_4 + CLASS_3 + CLASS_2 + CLASS_1 + STAND)  AS ENTRY_NUMBER,
            (CLASS_CNT + CENTER_STAND_MAX) AS MAXIMUM_NUMBER
        FROM (
            SELECT M.CENTER_CD,M.CENTER_NM, M.CENTER_ORDER,
                NVL(SUM(CLASS_4), 0) AS CLASS_4,
                NVL(SUM(CLASS_3), 0) AS CLASS_3,
                NVL(SUM(CLASS_2), 0) AS CLASS_2,
                NVL(SUM(CLASS_1), 0) AS CLASS_1,
                NVL(SUM(STAND), 0) AS STAND,
                (   SELECT COUNT(*)
                    FROM TSEB_PART_INFO_D P
                        INNER JOIN TSEB_SEAT_INFO_D S ON S.CENTER_CD = P.CENTER_CD AND S.PART_CD = P.PART_CD
                    WHERE P.CENTER_CD = M.CENTER_CD
                        AND P.USE_YN = 'Y'
                        AND P.PART_CLASS IS NOT NULL
                        AND S.USE_YN = 'Y'
                ) AS CLASS_CNT,
                NVL((SELECT CENTER_STAND_MAX FROM TSEB_CENTER_INFO_M WHERE CENTER_CD = M.CENTER_CD AND CENTER_STAND_YN = 'Y'), 0) AS CENTER_STAND_MAX
            FROM CTE_CENTER M
                LEFT OUTER JOIN (
                    SELECT
                        CASE WHEN R.RESV_ENTRY_DVSN = 'ENTRY_DVSN_2' AND P.PART_CLASS = 'SEAT_CLASS_4' THEN 1 ELSE 0 END AS CLASS_4,
                        CASE WHEN R.RESV_ENTRY_DVSN = 'ENTRY_DVSN_2' AND P.PART_CLASS = 'SEAT_CLASS_3' THEN 1 ELSE 0 END AS CLASS_3,
                        CASE WHEN R.RESV_ENTRY_DVSN = 'ENTRY_DVSN_2' AND P.PART_CLASS = 'SEAT_CLASS_2' THEN 1 ELSE 0 END AS CLASS_2,
                        CASE WHEN R.RESV_ENTRY_DVSN = 'ENTRY_DVSN_2' AND P.PART_CLASS = 'SEAT_CLASS_1' THEN 1 ELSE 0 END AS CLASS_1,
                        CASE WHEN R.RESV_ENTRY_DVSN = 'ENTRY_DVSN_1' THEN 1 ELSE 0 END AS STAND,
                        M.CENTER_CD, P.PART_CD, P.PART_CLASS
                    FROM TSER_RESV_INFO_I R
                        INNER JOIN CTE_CENTER M ON R.CENTER_CD = M.CENTER_CD
                        LEFT OUTER JOIN TSEB_PART_INFO_D P ON R.PART_CD = P.PART_CD
                    WHERE RESV_END_DT = TO_CHAR(SYSDATE,'YYYYMMDD')
                        AND R.RESV_STATE IN ('RESV_STATE_2', 'RESV_STATE_3')
                ) A ON M.CENTER_CD = A.CENTER_CD
            GROUP BY M.CENTER_CD, M.CENTER_NM, M.CENTER_ORDER
        ) TB
        ORDER BY CENTER_ORDER
    </select>
    
    <select id="selectCenterUsageStatList" resultType="lmap">
		SELECT 
        	TO_CHAR(TO_DATE(A.RESV_DATE,'YYYYMMDD'),'YYYY-MM-DD') AS RESV_DATE, B.CENTER_NM, A.SEAT_ALL_COUNT, 
        	A.M_RESV_ALL_COUNT, A.M_RESV_SUCCESS_COUNT, A.M_RESV_CANCEL_COUNT, A.M_RESV_SUCCESS_PER || '%' AS M_RESV_SUCCESS_PER,
        	A.G_RESV_ALL_COUNT, A.G_RESV_SUCCESS_COUNT, A.G_RESV_CANCEL_COUNT, A.G_RESV_SUCCESS_PER || '%' AS G_RESV_SUCCESS_PER,
        	A.T_RESV_ALL_COUNT, A.T_RESV_SUCCESS_COUNT, A.T_RESV_CANCEL_COUNT, 
        	A.T_RESV_SUCCESS_PER || '%' AS T_RESV_SUCCESS_PER, 
        	A.T_RESV_CANCEL_PER || '%' AS T_RESV_CANCEL_PER, 
        	A.T_CENTER_USE_PER || '%' AS T_CENTER_USE_PER
        FROM TSET_CENTER_RESV_STAT_M A, TSEB_CENTER_INFO_M B
        WHERE A.CENTER_CD = B.CENTER_CD
        <if test="!@org.apache.commons.lang3.StringUtils@isEmpty(params.searchCenterCd)">
        	AND A.CENTER_CD = #{params.searchCenterCd}
		</if>
        AND RESV_DATE BETWEEN #{params.searchResvDateFrom} AND #{params.searchResvDateTo}
        ORDER BY A.RESV_DATE ASC, B.CENTER_ORDER ASC
    </select>
   	
	<select id="selectCenterUsageStatTotal" resultType="lmap">
		SELECT 
			ST.*,
			ROUND(NVL(M_RESV_SUCCESS_COUNT/DECODE(M_RESV_ALL_COUNT, 0, NULL, M_RESV_ALL_COUNT),0) * 100, 1) || '%' AS M_RESV_SUCCESS_PER,
			ROUND(NVL(G_RESV_SUCCESS_COUNT/DECODE(G_RESV_ALL_COUNT, 0, NULL, G_RESV_ALL_COUNT),0) * 100, 1) || '%' AS G_RESV_SUCCESS_PER,
			ROUND(NVL(T_RESV_SUCCESS_COUNT/DECODE(T_RESV_ALL_COUNT, 0, NULL, T_RESV_ALL_COUNT),0) * 100, 1) || '%' AS T_RESV_SUCCESS_PER,
        	ROUND(NVL(T_RESV_CANCEL_COUNT/DECODE(T_RESV_ALL_COUNT, 0, NULL, T_RESV_ALL_COUNT),0) * 100, 1)  || '%' AS T_RESV_CANCEL_PER,
        	ROUND(NVL(T_RESV_SUCCESS_COUNT/DECODE(SEAT_ALL_COUNT, 0, NULL, SEAT_ALL_COUNT),0) * 100, 1) || '%' AS T_CENTER_USE_PER
		FROM 
		(
			SELECT 
	        	NVL(SUM(A.SEAT_ALL_COUNT),0) SEAT_ALL_COUNT,
	        	NVL(SUM(A.M_RESV_ALL_COUNT),0) M_RESV_ALL_COUNT, NVL(SUM(A.M_RESV_SUCCESS_COUNT),0) M_RESV_SUCCESS_COUNT, NVL(SUM(A.M_RESV_CANCEL_COUNT),0) M_RESV_CANCEL_COUNT,
	        	NVL(SUM(A.G_RESV_ALL_COUNT),0) G_RESV_ALL_COUNT, NVL(SUM(A.G_RESV_SUCCESS_COUNT),0) G_RESV_SUCCESS_COUNT, NVL(SUM(A.G_RESV_CANCEL_COUNT),0) G_RESV_CANCEL_COUNT,
	        	NVL(SUM(A.T_RESV_ALL_COUNT),0) T_RESV_ALL_COUNT, NVL(SUM(A.T_RESV_SUCCESS_COUNT),0) T_RESV_SUCCESS_COUNT, NVL(SUM(A.T_RESV_CANCEL_COUNT),0) T_RESV_CANCEL_COUNT
	        FROM TSET_CENTER_RESV_STAT_M A, TSEB_CENTER_INFO_M B
	        WHERE A.CENTER_CD = B.CENTER_CD
	        <if test="!@org.apache.commons.lang3.StringUtils@isEmpty(params.searchCenterCd)">
	        	AND A.CENTER_CD = #{params.searchCenterCd}
			</if>
	        AND RESV_DATE BETWEEN #{params.searchResvDateFrom} AND #{params.searchResvDateTo}
        ) ST
	</select>   
	
	<insert id="insertCenterUsageStat">
		INSERT INTO TSET_CENTER_RESV_STAT_M  
        (
        	RESV_DATE, CENTER_CD, SEAT_ALL_COUNT, 
        	M_RESV_ALL_COUNT, M_RESV_SUCCESS_COUNT, M_RESV_CANCEL_COUNT, M_RESV_SUCCESS_PER,
        	G_RESV_ALL_COUNT, G_RESV_SUCCESS_COUNT, G_RESV_CANCEL_COUNT, G_RESV_SUCCESS_PER,
        	T_RESV_ALL_COUNT, T_RESV_SUCCESS_COUNT, T_RESV_CANCEL_COUNT,
        	T_RESV_SUCCESS_PER, T_RESV_CANCEL_PER, T_CENTER_USE_PER
		)
        WITH CENTER_INFO AS (
            SELECT 
            	A.CENTER_CD, A.CENTER_NM, A.CENTER_ORDER,
            	NVL((SELECT CENTER_STAND_MAX FROM TSEB_CENTER_INFO_M WHERE CENTER_CD = A.CENTER_CD AND CENTER_STAND_YN = 'Y'), 0) +
				NVL((SELECT COUNT(*) FROM TSEB_SEAT_INFO_D B WHERE B.CENTER_CD = A.CENTER_CD AND B.USE_YN = 'Y' AND A.CENTER_PILOT_YN ='Y'), 0) AS SEAT_ALL_COUNT    
            FROM TSEB_CENTER_INFO_M A
			WHERE A.USE_YN = 'Y'            
            GROUP BY A.CENTER_CD, A.CENTER_NM, A.CENTER_ORDER, A.CENTER_PILOT_YN
            ORDER BY A.CENTER_ORDER
        )
        SELECT 
        	TO_CHAR(SYSDATE,'YYYYMMDD'), CENTER_CD, SEAT_ALL_COUNT,
        	M_RESV_ALL_COUNT, M_RESV_SUCCESS_COUNT, M_RESV_CANCEL_COUNT, 
        	ROUND(NVL(M_RESV_SUCCESS_COUNT/DECODE(M_RESV_ALL_COUNT, 0, NULL, M_RESV_ALL_COUNT),0) * 100, 1) AS M_RESV_SUCCESS_PER,
        	G_RESV_ALL_COUNT, G_RESV_SUCCESS_COUNT, G_RESV_CANCEL_COUNT, 
        	ROUND(NVL(G_RESV_SUCCESS_COUNT/DECODE(G_RESV_ALL_COUNT, 0, NULL, G_RESV_ALL_COUNT),0) * 100, 1) AS G_RESV_SUCCESS_PER,
        	T_RESV_ALL_COUNT, T_RESV_SUCCESS_COUNT, T_RESV_CANCEL_COUNT, 
        	ROUND(NVL(T_RESV_SUCCESS_COUNT/DECODE(T_RESV_ALL_COUNT, 0, NULL, T_RESV_ALL_COUNT),0) * 100, 1) AS T_RESV_SUCCESS_PER,
        	ROUND(NVL(T_RESV_CANCEL_COUNT/DECODE(T_RESV_ALL_COUNT, 0, NULL, T_RESV_ALL_COUNT),0) * 100, 1)  AS T_RESV_CANCEL_PER,
        	ROUND(NVL(T_RESV_SUCCESS_COUNT/DECODE(SEAT_ALL_COUNT, 0, NULL, SEAT_ALL_COUNT),0) * 100, 1) AS T_CENTER_USE_PER
        FROM
        ( 
	        SELECT 
	        	C.CENTER_CD, C.CENTER_NM, C.SEAT_ALL_COUNT,
	        	NVL(SUM(CASE WHEN C.CENTER_CD = R.CENTER_CD AND R.RESV_USER_DVSN = 'USER_DVSN_1' THEN 1 ELSE 0 END),0) AS M_RESV_ALL_COUNT,
	        	NVL(SUM(CASE WHEN C.CENTER_CD = R.CENTER_CD AND R.RESV_USER_DVSN = 'USER_DVSN_1' AND R.RESV_STATE = 'RESV_STATE_3' THEN 1 ELSE 0 END),0) AS M_RESV_SUCCESS_COUNT,
	        	NVL(SUM(CASE WHEN C.CENTER_CD = R.CENTER_CD AND R.RESV_USER_DVSN = 'USER_DVSN_1' AND R.RESV_STATE = 'RESV_STATE_4' THEN 1 ELSE 0 END),0) AS M_RESV_CANCEL_COUNT,
	        	NVL(SUM(CASE WHEN C.CENTER_CD = R.CENTER_CD AND R.RESV_USER_DVSN = 'USER_DVSN_2' THEN 1 ELSE 0 END),0) AS G_RESV_ALL_COUNT,
	        	NVL(SUM(CASE WHEN C.CENTER_CD = R.CENTER_CD AND R.RESV_USER_DVSN = 'USER_DVSN_2' AND R.RESV_STATE = 'RESV_STATE_3' THEN 1 ELSE 0 END),0) AS G_RESV_SUCCESS_COUNT,
	        	NVL(SUM(CASE WHEN C.CENTER_CD = R.CENTER_CD AND R.RESV_USER_DVSN = 'USER_DVSN_2' AND R.RESV_STATE = 'RESV_STATE_4' THEN 1 ELSE 0 END),0) AS G_RESV_CANCEL_COUNT,
	        	NVL(SUM(CASE WHEN C.CENTER_CD = R.CENTER_CD THEN 1 ELSE 0 END),0) AS T_RESV_ALL_COUNT,
	        	NVL(SUM(CASE WHEN C.CENTER_CD = R.CENTER_CD AND R.RESV_STATE = 'RESV_STATE_3' THEN 1 ELSE 0 END),0) AS T_RESV_SUCCESS_COUNT,
	        	NVL(SUM(CASE WHEN C.CENTER_CD = R.CENTER_CD AND R.RESV_STATE = 'RESV_STATE_4' THEN 1 ELSE 0 END),0) AS T_RESV_CANCEL_COUNT
	        FROM CENTER_INFO C,
	        (
				SELECT
					RESV_END_DT, CENTER_CD, RESV_USER_DVSN, RESV_STATE
				FROM TSER_RESV_INFO_I
				WHERE RESV_END_DT = TO_CHAR(SYSDATE,'YYYYMMDD')
	        ) R
	        WHERE C.CENTER_CD = R.CENTER_CD(+)
	        GROUP BY C.CENTER_CD ,C.CENTER_NM, C.SEAT_ALL_COUNT, C.CENTER_ORDER
	        ORDER BY C.CENTER_ORDER
        )
	</insert>
	
	<insert id="insertCenterResvPayStat">
		INSERT INTO TSEA_ACCNUT_PROCESS
		(
			TRAD_DATE, CENTER_RBM_CD, RESV_TICKET_DVSN, ENTRY_PAY_COST, SEAT_PAY_COST
		)
		WITH CENTER_INFO AS
		(
		   SELECT
				TO_CHAR(SYSDATE,'YYYYMMDD') AS TRAD_DATE, B.CENTER_CD, B.CENTER_RBM_CD, B.CENTER_NM,
				B.CENTER_ORDER, A.CODE AS RESV_TICKET_DVSN
		   FROM COMTCCMMNDETAILCODE A, TSEB_CENTER_INFO_M B
		   WHERE CODE_ID = 'RESV_TICKET_DVSN'
		   ORDER BY CENTER_ORDER ASC
	  	)
	    SELECT
	    	CT.TRAD_DATE, CT.CENTER_RBM_CD, CT.RESV_TICKET_DVSN,
	    	NVL(SUM(RESV.RESV_ENTRY_PAY_COST),0),
	    	NVL(SUM(RESV.RESV_SEAT_PAY_COST),0)
	    FROM CENTER_INFO CT, TSER_RESV_INFO_I RESV
	    WHERE CT.CENTER_CD = RESV.CENTER_CD(+)
	    AND CT.RESV_TICKET_DVSN = RESV.RESV_TICKET_DVSN(+)
	    AND CT.TRAD_DATE = TO_CHAR(RESV.TRAD_DATE(+),'YYYYMMDD')
	    AND CT.CENTER_RBM_CD IS NOT NULL
	    AND RESV.RESV_STATE(+) = 'RESV_STATE_3'
	    AND RESV.RESV_PAY_DVSN(+) = 'RESV_PAY_DVSN_2'
	    GROUP BY CT.TRAD_DATE, CT.CENTER_RBM_CD, CT.CENTER_ORDER, CT.RESV_TICKET_DVSN
	    ORDER BY CT.CENTER_ORDER ASC, CT.RESV_TICKET_DVSN ASC
	</insert>
</mapper>