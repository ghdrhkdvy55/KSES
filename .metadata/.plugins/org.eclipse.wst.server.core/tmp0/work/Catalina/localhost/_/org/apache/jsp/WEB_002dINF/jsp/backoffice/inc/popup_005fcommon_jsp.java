/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.99
 * Generated at: 2021-11-30 06:18:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.backoffice.inc;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class popup_005fcommon_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<div data-popup=\"savePage\" id=\"savePage\" class=\"popup m_pop\">\r\n");
      out.write("      <div class=\"pop_con\">\r\n");
      out.write("        <a id=\"a_closePop\" class=\"button b-close\">X</a>\r\n");
      out.write("        <p class=\"pop_tit\">메세지</p>\r\n");
      out.write("        <p class=\"pop_wrap\"><span id=\"sp_Message\"></span></p>\r\n");
      out.write("        <div class=\"right_box\" id=\"db_closePop\">\r\n");
      out.write("            <a href=\"#\" onClick=\"fn_BeforePop()\" class=\"grayBtn\">확인</a>\r\n");
      out.write("        </div>\r\n");
      out.write("      </div>\r\n");
      out.write("</div>\r\n");
      out.write("<div data-popup=\"reloadPage\" id=\"reloadPage\" class=\"popup m_pop\">\r\n");
      out.write("      <div class=\"pop_con\">\r\n");
      out.write("        <a id=\"a_closePop\" class=\"button b-close\">X</a>\r\n");
      out.write("        <p class=\"pop_tit\">메세지</p>\r\n");
      out.write("        <p class=\"pop_wrap\"><span id=\"sp_Message\"></span></p>\r\n");
      out.write("        <div class=\"right_box\" id=\"db_closePop\">\r\n");
      out.write("            <a href=\"#\" onClick=\"location.reload()\" class=\"grayBtn\">확인</a>\r\n");
      out.write("        </div>\r\n");
      out.write("      </div>\r\n");
      out.write("</div>\r\n");
      out.write("<div data-popup=\"confirmPage\" id=\"confirmPage\" class=\"popup m_pop\">\r\n");
      out.write("      <div class=\"pop_con\">\r\n");
      out.write("        <a id=\"a_closePop\" class=\"button b-close\">X</a>\r\n");
      out.write("        <p class=\"pop_tit\">메세지</p>\r\n");
      out.write("        <p class=\"pop_wrap\"><span id=\"sp_MessageAlert\"></span></p>\r\n");
      out.write("        <div class=\"left_box\">\r\n");
      out.write("          <a href=\"\" id=\"id_ConfirmInfo\" class=\"blueBtn\">예</a>\r\n");
      out.write("          <a href=\"javascript:fn_ConfirmClose()\" class=\"grayBtn\">아니요</a>\r\n");
      out.write("      </div>\r\n");
      out.write("      </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div  id=\"dv_excelUpload\" class=\"popup m_pop\">\r\n");
      out.write("      <div class=\"pop_con\">\r\n");
      out.write("        <a id=\"a_closePop\" class=\"button b-close\">X</a>\r\n");
      out.write("        <p class=\"pop_tit\">엑셀 업로드</p>\r\n");
      out.write("        <p class=\"pop_wrap\"><input type=\"file\" id=\"excel_file_input\" accept=\"xlsx/*\"></p>\r\n");
      out.write("        <div class=\"left_box\">\r\n");
      out.write("        <div class=\"right_box\" id=\"db_closePop\">\r\n");
      out.write("            <a href=\"#\" id=\"aUploadId\" class=\"grayBtn\">확인</a>\r\n");
      out.write("        </div>  \r\n");
      out.write("      </div>\r\n");
      out.write("      </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<button type=\"button\" id=\"btn_Message\" style=\"display:none\" data-popup-open=\"savePage\"></button>\r\n");
      out.write("<input type=\"hidden\" id=\"btn_ClickId\" style=\"display:none\" />\r\n");
      out.write("<!--  삭제 코드 -->\r\n");
      out.write("<input type=\"hidden\" id=\"hid_DelCode\" name=\"hid_DelCode\" style=\"display:none\" />\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("   function fn_BeforePop(){\r\n");
      out.write("\t   $(\"#savePage\").bPopup().close();\r\n");
      out.write("\t   var btn_ClickId =  $(\"#btn_ClickId\").val();\r\n");
      out.write("\t   if (btn_ClickId != \"\")\r\n");
      out.write("\t       $(\"#\"+ btn_ClickId).bPopup();\r\n");
      out.write("   }\r\n");
      out.write("   function fn_ConfirmPop(alertMessage){\r\n");
      out.write("\t   $(\"#sp_MessageAlert\").html(alertMessage);\r\n");
      out.write("\t   $(\"#confirmPage\").bPopup();\r\n");
      out.write("   }\r\n");
      out.write("   function fn_ConfirmClose(){ \r\n");
      out.write("\t   $(\"#hid_DelCode\").val('')\r\n");
      out.write("\t   $(\"#id_ConfirmInfo\").attr(\"href\",\"\");\r\n");
      out.write("\t   $(\"#confirmPage\").bPopup().close();\r\n");
      out.write("   }\r\n");
      out.write("   function fn_Upload (){\r\n");
      out.write("\t\t$(\"#dv_excelUpload\").bPopup();\r\n");
      out.write("\t\t$(\"#aUploadId\").attr(\"href\", \"javascript:fn_excelUpload()\");\r\n");
      out.write("   }\r\n");
      out.write("   function fn_excelUpload (_sheetInt, callback){\r\n");
      out.write("\t\tvar input = $(\"#excel_file_input\")[0]; //event.target;\r\n");
      out.write("\t    var reader = new FileReader();\r\n");
      out.write("\t    reader.onload = function(){\r\n");
      out.write("\t        var fileData = reader.result;\r\n");
      out.write("\t        var wb = XLSX.read(fileData, {type : 'binary'});\r\n");
      out.write("\t        var sheetNameList = wb.SheetNames; // 시트 이름 목록 가져오기 \r\n");
      out.write("\t        var sheetName = sheetNameList[parseInt(_sheetInt)]; //  시트명\r\n");
      out.write("\t        var jsonSheet = wb.Sheets[sheetName]; // 첫번째 시트 \r\n");
      out.write("\t        callback(sheetNameList, sheetName, JSON.stringify(XLSX.utils.sheet_to_json (jsonSheet)));      \r\n");
      out.write("\t    };\r\n");
      out.write("\t    reader.readAsBinaryString(input.files[0]);\r\n");
      out.write("   }\r\n");
      out.write("   function handleExcelDataAll(sheet){\r\n");
      out.write("\t\thandleExcelDataHeader(sheet); // header 정보 \r\n");
      out.write("\t\thandleExcelDataJson(sheet); // json 형태\r\n");
      out.write("\t\thandleExcelDataCsv(sheet); // csv 형태\r\n");
      out.write("\t\thandleExcelDataHtml(sheet); // html 형태\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction handleExcelDataHeader(sheet){\r\n");
      out.write("\t    var headers = get_header_row(sheet);\r\n");
      out.write("\t    $(\"#displayHeaders\").html(JSON.stringify(headers));\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction handleExcelDataJson(sheet){\r\n");
      out.write("\t    $(\"#displayExcelJson\").html(JSON.stringify(XLSX.utils.sheet_to_json (sheet)));\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction handleExcelDataCsv(sheet){\r\n");
      out.write("\t    $(\"#displayExcelCsv\").html(XLSX.utils.sheet_to_csv (sheet));\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction handleExcelDataHtml(sheet){\r\n");
      out.write("\t    $(\"#displayExcelHtml\").html(XLSX.utils.sheet_to_html (sheet));\r\n");
      out.write("\t}\r\n");
      out.write("\t// 출처 : https://github.com/SheetJS/js-xlsx/issues/214\r\n");
      out.write("\tfunction get_header_row(sheet) {\r\n");
      out.write("\t    var headers = [];\r\n");
      out.write("\t    var range = XLSX.utils.decode_range(sheet['!ref']);\r\n");
      out.write("\t    var C, R = range.s.r; /* start in the first row */\r\n");
      out.write("\t    /* walk every column in the range */\r\n");
      out.write("\t    for(C = range.s.c; C <= range.e.c; ++C) {\r\n");
      out.write("\t        var cell = sheet[XLSX.utils.encode_cell({c:C, r:R})] /* find the cell in the first row */\r\n");
      out.write("\t        var hdr = \"UNKNOWN \" + C; // <-- replace with your desired default \r\n");
      out.write("\t        if(cell && cell.t) hdr = XLSX.utils.format_cell(cell);\r\n");
      out.write("\t        headers.push(hdr);\r\n");
      out.write("\t    }\r\n");
      out.write("\t    return headers;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write(" \r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
